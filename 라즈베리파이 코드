import RPi.GPIO as GPIO  # 라즈베리 파이의 GPIO 핀을 제어하기 위한 라이브러리
import time  # 시간 지연을 위한 라이브러리
import cv2  # OpenCV 라이브러리, 이미지 처리 및 카메라 제어에 사용
import numpy as np  # 수치 연산을 위한 NumPy 라이브러리
import tensorflow as tf  # 딥러닝 모델을 로드하고 예측하는 데 사용되는 TensorFlow 라이브러리
from gpiozero import Servo  # 서보 모터 제어를 위한 라이브러리
import smbus  # I2C 통신을 위한 라이브러리
from time import sleep

# I2C 버스 설정 (라즈베리파이 모델에 따라 변경 가능, 보통 1번 버스 사용)
I2C_ADDR = 0x27  # LCD I2C 주소 (일반적으로 0x27이 기본)
LCD_WIDTH = 16  # LCD 문자 수 (일반적으로 16 또는 20)
LCD_CHR = 1  # 문자 모드 설정
LCD_CMD = 0  # 명령 모드 설정
LCD_LINE_1 = 0x80  # 1번째 줄
LCD_LINE_2 = 0xC0  # 2번째 줄
LCD_BACKLIGHT = 0x08  # 백라이트 설정
ENABLE = 0b00000100  # Enable bit

# I2C 버스 생성
bus = smbus.SMBus(1)

# LCD 초기화 함수
def lcd_init():
    lcd_byte(0x33, LCD_CMD)  # 110011 초기화
    lcd_byte(0x32, LCD_CMD)  # 110010 초기화
    lcd_byte(0x06, LCD_CMD)  # 커서 이동 방향
    lcd_byte(0x0C, LCD_CMD)  # 디스플레이 켬, 커서 끔
    lcd_byte(0x28, LCD_CMD)  # 데이터 길이, 폰트 크기 설정
    lcd_byte(0x01, LCD_CMD)  # 화면 지움
    sleep(0.0005)

# 데이터를 LCD에 전송하는 함수
def lcd_byte(bits, mode):
    bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT
    bits_low = mode | ((bits << 4) & 0xF0) | LCD_BACKLIGHT
    bus.write_byte(I2C_ADDR, bits_high)
    lcd_toggle_enable(bits_high)
    bus.write_byte(I2C_ADDR, bits_low)
    lcd_toggle_enable(bits_low)

# Enable 핀을 토글하는 함수
def lcd_toggle_enable(bits):
    sleep(0.0005)
    bus.write_byte(I2C_ADDR, (bits | ENABLE))
    sleep(0.0005)
    bus.write_byte(I2C_ADDR, (bits & ~ENABLE))
    sleep(0.0005)

# 메시지를 출력하는 함수
def lcd_string(message, line):
    message = message.ljust(LCD_WIDTH, " ")
    lcd_byte(line, LCD_CMD)
    for i in range(LCD_WIDTH):
        lcd_byte(ord(message[i]), LCD_CHR)

# LCD 초기화
lcd_init()

# GPIO 핀 번호 설정
TRIG_PIN_1 = 23  # 초음파 센서 1의 트리거 핀 (입구)
ECHO_PIN_1 = 24  # 초음파 센서 1의 에코 핀 (입구)
TRIG_PIN_2 = 25  # 초음파 센서 2의 트리거 핀 (카메라 위치)
ECHO_PIN_2 = 8   # 초음파 센서 2의 에코 핀 (카메라 위치)
MOTOR_PIN1 = 17  # 컨베이어 벨트 모터의 제어 핀 1
MOTOR_PIN2 = 27  # 컨베이어 벨트 모터의 제어 핀 2
SERVO_PIN1 = 22  # 서보 모터1 제어 핀
SERVO_PIN2 = 23  # 서보 모터2 제어 핀

# GPIO 초기화 및 핀 모드 설정
GPIO.setmode(GPIO.BCM)  # GPIO 핀 번호를 BCM 모드로 설정
GPIO.setup(TRIG_PIN_1, GPIO.OUT)  # 초음파 센서 1 트리거 핀 출력 모드 설정
GPIO.setup(ECHO_PIN_1, GPIO.IN)  # 초음파 센서 1 에코 핀 입력 모드 설정
GPIO.setup(TRIG_PIN_2, GPIO.OUT)  # 초음파 센서 2 트리거 핀 출력 모드 설정
GPIO.setup(ECHO_PIN_2, GPIO.IN)  # 초음파 센서 2 에코 핀 입력 모드 설정
GPIO.setup(MOTOR_PIN1, GPIO.OUT)  # 모터 제어 핀 1을 출력 모드로 설정
GPIO.setup(MOTOR_PIN2, GPIO.OUT)  # 모터 제어 핀 2를 출력 모드로 설정

# 서보 모터 초기화
servo1 = Servo(SERVO_PIN1)  # 서보 모터 1 (왼쪽)
servo2 = Servo(SERVO_PIN2)  # 서보 모터 2 (오른쪽)

# 딥러닝 모델 로드
model = tf.keras.models.load_model('waste_classification/model.h5')  # 사전 학습된 쓰레기 분류 모델을 로드

# 모터를 앞으로 회전시키는 함수 (컨베이어 벨트 작동)
def motor_forward():
    GPIO.output(MOTOR_PIN1, GPIO.HIGH)  # 모터 핀 1을 HIGH로 설정 (정방향 회전)
    GPIO.output(MOTOR_PIN2, GPIO.HIGH)  # 모터 핀 2를 HIGH로 설정

# 모터를 정지시키는 함수 (컨베이어 벨트 정지)
def motor_stop():
    GPIO.output(MOTOR_PIN1, GPIO.LOW)  # 모터 핀 1을 LOW로 설정 (모터 정지)
    GPIO.output(MOTOR_PIN2, GPIO.LOW)  # 모터 핀 2를 LOW로 설정 

# 초음파 센서를 사용하여 물체까지의 거리를 측정하는 함수
def get_distance(trig_pin, echo_pin):
    GPIO.output(trig_pin, True)  # 트리거 핀을 HIGH로 설정하여 초음파 발사
    time.sleep(0.00001)  # 10 마이크로초 후 트리거 핀을 LOW로 설정
    GPIO.output(trig_pin, False)

    start_time = time.time()
    stop_time = time.time()

    while GPIO.input(echo_pin) == 0:  # 에코 핀이 LOW일 동안 대기
        start_time = time.time()

    while GPIO.input(echo_pin) == 1:  # 에코 핀이 HIGH일 동안 대기
        stop_time = time.time()

    time_elapsed = stop_time - start_time  # 초음파가 이동한 시간 계산
    distance = (time_elapsed * 34300) / 2  # 시간을 이용해 거리를 계산 (단위: cm)
    return distance  # 계산된 거리 반환

# 이미지 전처리 함수 (딥러닝 모델 입력에 맞게 이미지 변환)
def preprocess_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (224, 224))  # 모델 입력 크기에 맞춰 이미지 크기 조정
    img = img.astype('float32') / 255.0  # 정규화
    img = np.expand_dims(img, axis=0)  # 배치 차원 추가
    return img  # 전처리된 이미지 반환

# 이미지 분류 함수 (이미지의 쓰레기 종류를 예측)
def classify_waste(image_path):
    img = preprocess_image(image_path)
    prediction = model.predict(img)
    class_idx = np.argmax(prediction, axis=1)[0]
    
    class_names = ['Plastic', 'Paper', 'Metal', 'PET', 'General']
    return class_names[class_idx]

# 서보 모터 회전 함수 (쓰레기 분류에 따른 각도 조절)
def move_servo(result):
    if result == 'Paper':
        servo1.value = 30 / 180.0  # 서보 모터 1: 30도 (왼쪽)
        servo2.value = -30 / 180.0  # 서보 모터 2: 30도 (오른쪽)
    elif result == 'Metal':
        servo1.value = 60 / 180.0  # 서보 모터 1: 60도 (왼쪽)
        servo2.value = -60 / 180.0  # 서보 모터 2: 60도 (오른쪽)
    elif result == 'Plastic':
        servo1.value = 90 / 180.0  # 서보 모터 1: 90도 (왼쪽)
        servo2.value = -90 / 180.0  # 서보 모터 2: 90도 (오른쪽)
    else:
        servo1.value = 0  # 서보 모터 중립 위치
        servo2.value = 0  # 서보 모터 중립 위치

# 쓰레기 종류 출력 함수 (LCD에 쓰레기 종류를 출력)
def display_waste_type(waste_type):
    lcd_string("Classified as:", LCD_LINE_1)  # 첫 번째 줄에 출력
    lcd_string(waste_type, LCD_LINE_2)  # 두 번째 줄에 쓰레기 종류 출력

# 카메라로 사진을 찍고 쓰레기를 분류하는 함수
def capture_and_classify():
    camera = cv2.VideoCapture(0)
    ret, frame = camera.read()  # 카메라로부터 이미지를 캡처
    if ret:
        image_path = 'captured_image.jpg'
        cv2.imwrite(image_path, frame)  # 이미지를 파일로 저장
        result = classify_waste(image_path)  # 분류 결과 예측
        return result
    else:
        return "Error"

# 메인 루프 (프로그램의 주요 동작을 관리)
try:
    while True:
        # 입구 초음파 센서가 물체 감지 시 컨베이어 벨트 작동
        if get_distance(TRIG_PIN_1, ECHO_PIN_1) < 10:
            motor_forward()

        # 카메라 위치 초음파 센서가 물체 감지 시 컨베이어 벨트 정지
        if get_distance(TRIG_PIN_2, ECHO_PIN_2) < 10:
            motor_stop()
            result = capture_and_classify()  # 카메라로 사진을 찍고 분류
            print(f"Classified as: {result}")
            display_waste_type(result)  # LCD에 결과 출력
            move_servo(result)  # 서보 모터를 쓰레기 종류에 따라 회전
            time.sleep(5)  # 5초간 컨베이어 벨트 작동
            motor_forward()
            time.sleep(5)
            motor_stop()

        time.sleep(1)  # 1초 대기 후 반복

except KeyboardInterrupt:  # 프로그램 종료 시 (Ctrl + C)
    GPIO.cleanup()  # GPIO 설정 초기화
    print("프로그램 종료")
